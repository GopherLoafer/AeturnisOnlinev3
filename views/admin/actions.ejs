<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Actions Log</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.1) 0%, transparent 50%),
                linear-gradient(135deg, #0f1419 0%, #1a1f2e 50%, #0f1419 100%);
            color: #e2e8f0;
            min-height: 100vh;
            font-size: 14px;
            line-height: 1.6;
        }

        .admin-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        h1 {
            color: #10b981;
            margin-bottom: 30px;
            font-size: 2rem;
            text-align: center;
        }

        .admin-nav {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .admin-nav a {
            padding: 10px 20px;
            background: rgba(20, 25, 35, 0.8);
            border: 1px solid rgba(100, 116, 139, 0.3);
            border-radius: 8px;
            color: #94a3b8;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .admin-nav a:hover {
            border-color: rgba(59, 130, 246, 0.6);
            background: rgba(16, 185, 129, 0.1);
            color: #10b981;
        }

        .actions-table {
            background: rgba(20, 25, 35, 0.8);
            border: 1px solid rgba(100, 116, 139, 0.3);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid rgba(100, 116, 139, 0.2);
        }

        th {
            background: rgba(0, 0, 0, 0.5);
            color: #10b981;
            font-weight: 600;
        }

        tr:hover {
            background: rgba(16, 185, 129, 0.05);
        }

        .action-badge {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: bold;
        }

        .action-ban { background: #dc2626; color: white; }
        .action-warn { background: #f59e0b; color: white; }
        .action-modify { background: #3b82f6; color: white; }
        .action-delete { background: #dc2626; color: white; }
        .action-create { background: #10b981; color: white; }
        .action-update { background: #8b5cf6; color: white; }

        .description {
            max-width: 300px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        .timestamp {
            color: #94a3b8;
            font-size: 12px;
        }

        .loading {
            text-align: center;
            padding: 50px;
            color: #94a3b8;
        }

        .filter-bar {
            margin-bottom: 20px;
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }

        .filter-select {
            padding: 8px 12px;
            background: rgba(20, 25, 35, 0.8);
            border: 1px solid rgba(100, 116, 139, 0.3);
            border-radius: 6px;
            color: #e2e8f0;
            font-family: inherit;
            font-size: 12px;
        }

        .filter-select:focus {
            outline: none;
            border-color: #10b981;
            box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2);
        }
    </style>
</head>
<body>
    <div class="admin-container">
        <h1>Admin Actions Log</h1>
        
        <nav class="admin-nav">
            <a href="/admin">Dashboard</a>
            <a href="/admin/users">Users</a>
            <a href="/admin/characters">Characters</a>
            <a href="/admin/race-management/race-statistics">Race Management</a>
            <a href="/admin/chat">Chat Monitor</a>
            <a href="/admin/actions">Action Log</a>
            <a href="/game/dashboard">Back to Game</a>
        </nav>

        <div class="filter-bar">
            <label>Filter by action type:</label>
            <select class="filter-select" id="action-filter">
                <option value="">All Actions</option>
                <option value="ban_user">Ban User</option>
                <option value="warn_user">Warn User</option>
                <option value="modify_character">Modify Character</option>
                <option value="delete_character">Delete Character</option>
                <option value="create_event">Create Event</option>
                <option value="race_change">Race Change</option>
            </select>

            <label>Filter by admin:</label>
            <select class="filter-select" id="admin-filter">
                <option value="">All Admins</option>
            </select>
        </div>

        <div class="actions-table">
            <div class="loading">Loading actions data...</div>
        </div>

        <script>
            let allActions = [];

            function getActionBadgeClass(actionType) {
                const types = {
                    'ban_user': 'action-ban',
                    'warn_user': 'action-warn',
                    'modify_character': 'action-modify',
                    'delete_character': 'action-delete',
                    'create_event': 'action-create',
                    'race_change': 'action-update'
                };
                return types[actionType] || 'action-modify';
            }

            function formatActionType(actionType) {
                return actionType.split('_').map(word => 
                    word.charAt(0).toUpperCase() + word.slice(1)
                ).join(' ');
            }

            function filterActions() {
                const actionFilter = document.getElementById('action-filter').value;
                const adminFilter = document.getElementById('admin-filter').value;
                
                const filtered = allActions.filter(action => {
                    const matchesAction = !actionFilter || action.action_type === actionFilter;
                    const matchesAdmin = !adminFilter || action.admin_username === adminFilter;
                    return matchesAction && matchesAdmin;
                });
                
                renderActions(filtered);
            }

            function renderActions(actions) {
                const tableContainer = document.querySelector('.actions-table');
                
                if (actions.length === 0) {
                    tableContainer.innerHTML = '<div class="loading">No actions found</div>';
                    return;
                }

                const tableHTML = `
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Admin</th>
                                <th>Action</th>
                                <th>Target</th>
                                <th>Description</th>
                                <th>Timestamp</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${actions.map(action => `
                                <tr>
                                    <td>${action.id}</td>
                                    <td><strong>${action.admin_username}</strong></td>
                                    <td>
                                        <span class="action-badge ${getActionBadgeClass(action.action_type)}">
                                            ${formatActionType(action.action_type)}
                                        </span>
                                    </td>
                                    <td>
                                        ${action.target_username || action.target_character_name || 'System'}
                                    </td>
                                    <td class="description" title="${action.description}">
                                        ${action.description}
                                    </td>
                                    <td class="timestamp">
                                        ${new Date(action.created_at).toLocaleString()}
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
                
                tableContainer.innerHTML = tableHTML;
            }

            function populateAdminFilter(actions) {
                const adminFilter = document.getElementById('admin-filter');
                const admins = [...new Set(actions.map(action => action.admin_username))];
                
                admins.forEach(admin => {
                    const option = document.createElement('option');
                    option.value = admin;
                    option.textContent = admin;
                    adminFilter.appendChild(option);
                });
            }

            // Load actions data
            if (typeof actions !== 'undefined' && actions.length > 0) {
                allActions = actions;
                renderActions(actions);
                populateAdminFilter(actions);
            } else {
                // For demo purposes, show empty state
                document.querySelector('.actions-table').innerHTML = 
                    '<div class="loading">No admin actions recorded yet</div>';
            }

            // Event listeners for filters
            document.getElementById('action-filter').addEventListener('change', filterActions);
            document.getElementById('admin-filter').addEventListener('change', filterActions);
        </script>
    </div>
</body>
</html>