<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Population Monitoring - Admin Panel</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .monitoring-container {
            max-width: 1600px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .monitoring-header {
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            border: 1px solid #00ff00;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .monitoring-grid {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .monitoring-section {
            background: rgba(0, 255, 0, 0.1);
            border: 1px solid #00ff00;
            border-radius: 10px;
            padding: 20px;
        }
        
        .full-width {
            grid-column: 1 / -1;
        }
        
        .half-width {
            grid-column: span 2;
        }
        
        .metric-card {
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #333;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            text-align: center;
            transition: all 0.3s ease;
        }
        
        .metric-card:hover {
            border-color: #00ff00;
            box-shadow: 0 0 15px rgba(0, 255, 0, 0.2);
        }
        
        .metric-title {
            font-size: 14px;
            color: #888;
            margin-bottom: 5px;
        }
        
        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: #00ff00;
            margin-bottom: 5px;
        }
        
        .metric-change {
            font-size: 12px;
            font-weight: bold;
        }
        
        .metric-increase { color: #00ff00; }
        .metric-decrease { color: #ff4444; }
        .metric-stable { color: #ffa500; }
        
        .race-population-chart {
            display: grid;
            gap: 10px;
        }
        
        .race-bar {
            position: relative;
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid #333;
            border-radius: 5px;
            padding: 10px;
            overflow: hidden;
        }
        
        .race-bar-fill {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            background: linear-gradient(90deg, rgba(0, 255, 0, 0.3), rgba(0, 255, 0, 0.1));
            border-radius: 5px;
            transition: width 0.5s ease;
        }
        
        .race-bar-content {
            position: relative;
            z-index: 2;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .race-name {
            font-weight: bold;
            color: #00ff00;
        }
        
        .race-stats {
            font-size: 12px;
            color: #ccc;
        }
        
        .activity-timeline {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
            margin-top: 15px;
        }
        
        .timeline-day {
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid #333;
            border-radius: 3px;
            padding: 5px;
            text-align: center;
            font-size: 11px;
        }
        
        .timeline-day.high-activity {
            background: rgba(0, 255, 0, 0.3);
            border-color: #00ff00;
        }
        
        .timeline-day.medium-activity {
            background: rgba(255, 165, 0, 0.3);
            border-color: #ffa500;
        }
        
        .timeline-day.low-activity {
            background: rgba(255, 68, 68, 0.3);
            border-color: #ff4444;
        }
        
        .alert-panel {
            background: rgba(255, 69, 0, 0.1);
            border: 1px solid #ff4500;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .alert-item {
            background: rgba(0, 0, 0, 0.5);
            border-left: 4px solid #ff4500;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 3px;
        }
        
        .alert-critical { border-left-color: #ff4444; }
        .alert-warning { border-left-color: #ffa500; }
        .alert-info { border-left-color: #0099ff; }
        
        .level-distribution-chart {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }
        
        .level-bracket {
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid #333;
            border-radius: 5px;
            padding: 10px;
            text-align: center;
        }
        
        .level-bracket-title {
            font-size: 12px;
            color: #888;
            margin-bottom: 5px;
        }
        
        .level-bracket-count {
            font-size: 18px;
            font-weight: bold;
            color: #00ff00;
        }
        
        .refresh-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 15px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
        }
        
        .auto-refresh {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .refresh-btn {
            background: linear-gradient(45deg, #00ff00, #00cc00);
            color: #000;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .refresh-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 255, 0, 0.3);
        }
        
        .loading-spinner {
            display: none;
            text-align: center;
            padding: 20px;
            color: #00ff00;
        }
        
        .last-updated {
            font-size: 12px;
            color: #666;
            text-align: center;
            margin-top: 10px;
        }
        
        .export-btn {
            background: linear-gradient(45deg, #0099ff, #0066cc);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="admin-container">
        <nav class="admin-nav">
            <h2>Admin Panel</h2>
            <ul>
                <li><a href="/admin">Dashboard</a></li>
                <li><a href="/admin/users">Users</a></li>
                <li><a href="/admin/characters">Characters</a></li>
                <li><a href="/admin/chat">Chat</a></li>
                <li><a href="/admin/actions">Actions</a></li>
                <li><a href="/admin/race-management">Race Management</a></li>
            </ul>
        </nav>
        
        <div class="admin-content">
            <div class="monitoring-container">
                <div class="monitoring-header">
                    <h1>üìä Population Monitoring Dashboard</h1>
                    <p>Real-time racial population health and activity analytics</p>
                </div>
                
                <div class="refresh-controls">
                    <div class="auto-refresh">
                        <label for="autoRefresh">Auto-refresh:</label>
                        <input type="checkbox" id="autoRefresh" checked>
                        <select id="refreshInterval">
                            <option value="30">30 seconds</option>
                            <option value="60" selected>1 minute</option>
                            <option value="300">5 minutes</option>
                        </select>
                    </div>
                    <div>
                        <button class="refresh-btn" onclick="refreshData()">üîÑ Refresh Now</button>
                        <button class="export-btn" onclick="exportData()">üìä Export Data</button>
                    </div>
                </div>
                
                <div id="alertsPanel" class="alert-panel" style="display: none;">
                    <h3>‚ö†Ô∏è Population Alerts</h3>
                    <div id="alertsList"></div>
                </div>
                
                <div class="monitoring-grid">
                    <div class="monitoring-section">
                        <h3>üìà Server Overview</h3>
                        <div class="metric-card">
                            <div class="metric-title">Total Characters</div>
                            <div class="metric-value" id="totalCharacters">0</div>
                            <div class="metric-change" id="charactersChange">+0 today</div>
                        </div>
                        
                        <div class="metric-card">
                            <div class="metric-title">Active Players (24h)</div>
                            <div class="metric-value" id="activePlayers24h">0</div>
                            <div class="metric-change" id="activeChange">+0 from yesterday</div>
                        </div>
                        
                        <div class="metric-card">
                            <div class="metric-title">New Registrations</div>
                            <div class="metric-value" id="newRegistrations">0</div>
                            <div class="metric-change" id="registrationsChange">+0 today</div>
                        </div>
                        
                        <div class="metric-card">
                            <div class="metric-title">Average Level</div>
                            <div class="metric-value" id="averageLevel">0</div>
                            <div class="metric-change" id="levelChange">+0.0 progression</div>
                        </div>
                    </div>
                    
                    <div class="monitoring-section">
                        <h3>‚è∞ Activity Timeline</h3>
                        <div class="activity-timeline" id="activityTimeline">
                            <!-- Dynamic timeline will be generated here -->
                        </div>
                        
                        <div style="margin-top: 20px;">
                            <h4>Peak Activity Hours</h4>
                            <div id="peakHours" style="font-size: 14px; color: #ccc;">
                                Loading...
                            </div>
                        </div>
                    </div>
                    
                    <div class="monitoring-section">
                        <h3>‚öñÔ∏è Population Balance</h3>
                        <div id="balanceScore" class="metric-card">
                            <div class="metric-title">Balance Health Score</div>
                            <div class="metric-value">0%</div>
                            <div class="metric-change">Calculating...</div>
                        </div>
                        
                        <div style="margin-top: 15px;">
                            <h4>Most/Least Popular</h4>
                            <div id="popularityRanking" style="font-size: 14px;">
                                Loading...
                            </div>
                        </div>
                    </div>
                    
                    <div class="monitoring-section full-width">
                        <h3>üèÅ Racial Population Distribution</h3>
                        <div class="race-population-chart" id="racePopulationChart">
                            <div class="loading-spinner">Loading population data...</div>
                        </div>
                    </div>
                    
                    <div class="monitoring-section half-width">
                        <h3>üìä Level Distribution</h3>
                        <div class="level-distribution-chart" id="levelDistributionChart">
                            <div class="loading-spinner">Loading level data...</div>
                        </div>
                    </div>
                    
                    <div class="monitoring-section">
                        <h3>üéØ Performance Metrics</h3>
                        <div class="metric-card">
                            <div class="metric-title">Retention Rate (7d)</div>
                            <div class="metric-value" id="retentionRate">0%</div>
                            <div class="metric-change" id="retentionChange">Stable</div>
                        </div>
                        
                        <div class="metric-card">
                            <div class="metric-title">Avg. Session Time</div>
                            <div class="metric-value" id="sessionTime">0m</div>
                            <div class="metric-change" id="sessionChange">+0m</div>
                        </div>
                        
                        <div class="metric-card">
                            <div class="metric-title">Character/User Ratio</div>
                            <div class="metric-value" id="characterRatio">0.0</div>
                            <div class="metric-change" id="ratioChange">Optimal</div>
                        </div>
                    </div>
                </div>
                
                <div class="loading-spinner" id="loadingSpinner">Updating data...</div>
                <div class="last-updated" id="lastUpdated">Last updated: Never</div>
            </div>
        </div>
    </div>
    
    <script>
        let refreshInterval = null;
        let populationData = {};
        
        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadInitialData();
            setupAutoRefresh();
            generateActivityTimeline();
        });
        
        async function loadInitialData() {
            await refreshData();
        }
        
        async function refreshData() {
            showLoading(true);
            
            try {
                // Load population monitoring data
                const response = await fetch('/admin/race-management/api/population-monitoring');
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('Population monitoring data loaded:', data);
                
                populationData = data;
                updateDashboard(data);
                checkForAlerts(data);
                
                document.getElementById('lastUpdated').textContent = `Last updated: ${new Date().toLocaleTimeString()}`;
                
            } catch (error) {
                console.error('Error loading monitoring data:', error);
                showError(`Failed to load monitoring data: ${error.message}`);
                
                // Show fallback data for debugging
                const fallbackData = {
                    totalCharacters: 0,
                    activePlayers24h: 0,
                    newRegistrations: 0,
                    averageLevel: 0,
                    raceDistribution: [],
                    levelDistribution: []
                };
                updateDashboard(fallbackData);
            } finally {
                showLoading(false);
            }
        }
        
        function updateDashboard(data) {
            // Update server overview metrics
            document.getElementById('totalCharacters').textContent = formatNumber(data.totalCharacters || 0);
            document.getElementById('activePlayers24h').textContent = formatNumber(data.activePlayers24h || 0);
            document.getElementById('newRegistrations').textContent = formatNumber(data.newRegistrations || 0);
            document.getElementById('averageLevel').textContent = (data.averageLevel || 0).toFixed(1);
            
            // Update changes with colors
            updateMetricChange('charactersChange', data.charactersChange || 0, 'today');
            updateMetricChange('activeChange', data.activeChange || 0, 'from yesterday');
            updateMetricChange('registrationsChange', data.registrationsChange || 0, 'today');
            updateMetricChange('levelChange', data.levelChange || 0, 'progression', true);
            
            // Update performance metrics
            document.getElementById('retentionRate').textContent = `${(data.retentionRate || 0).toFixed(1)}%`;
            document.getElementById('sessionTime').textContent = `${Math.round(data.avgSessionTime || 0)}m`;
            document.getElementById('characterRatio').textContent = (data.characterRatio || 0).toFixed(1);
            
            // Update population distribution
            updateRacePopulationChart(data.raceDistribution || []);
            
            // Update level distribution
            updateLevelDistributionChart(data.levelDistribution || []);
            
            // Update balance score
            updateBalanceScore(data.balanceHealth || 0);
            
            // Update popularity ranking
            updatePopularityRanking(data.raceDistribution || []);
        }
        
        function updateMetricChange(elementId, value, suffix, isFloat = false) {
            const element = document.getElementById(elementId);
            const formattedValue = isFloat ? value.toFixed(1) : formatNumber(Math.abs(value));
            
            if (value > 0) {
                element.textContent = `+${formattedValue} ${suffix}`;
                element.className = 'metric-change metric-increase';
            } else if (value < 0) {
                element.textContent = `-${formattedValue} ${suffix}`;
                element.className = 'metric-change metric-decrease';
            } else {
                element.textContent = `${formattedValue} ${suffix}`;
                element.className = 'metric-change metric-stable';
            }
        }
        
        function updateRacePopulationChart(raceData) {
            const container = document.getElementById('racePopulationChart');
            const totalCharacters = raceData.reduce((sum, race) => sum + race.count, 0);
            
            if (totalCharacters === 0) {
                container.innerHTML = '<p style="text-align: center; color: #666;">No character data available</p>';
                return;
            }
            
            container.innerHTML = raceData.map(race => {
                const percentage = (race.count / totalCharacters * 100).toFixed(1);
                
                return `
                    <div class="race-bar">
                        <div class="race-bar-fill" style="width: ${percentage}%"></div>
                        <div class="race-bar-content">
                            <div>
                                <div class="race-name">${race.race_name}</div>
                                <div class="race-stats">${race.count} characters (${percentage}%)</div>
                            </div>
                            <div class="race-stats">
                                Active: ${race.active_24h || 0} | Avg Level: ${(race.avg_level || 0).toFixed(1)}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }
        
        function updateLevelDistributionChart(levelData) {
            const container = document.getElementById('levelDistributionChart');
            
            if (!levelData || levelData.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: #666;">No level data available</p>';
                return;
            }
            
            container.innerHTML = levelData.map(bracket => `
                <div class="level-bracket">
                    <div class="level-bracket-title">${bracket.level_range}</div>
                    <div class="level-bracket-count">${bracket.count}</div>
                </div>
            `).join('');
        }
        
        function updateBalanceScore(balanceHealth) {
            const scoreElement = document.getElementById('balanceScore');
            const valueElement = scoreElement.querySelector('.metric-value');
            const changeElement = scoreElement.querySelector('.metric-change');
            
            valueElement.textContent = `${balanceHealth.toFixed(1)}%`;
            
            if (balanceHealth >= 80) {
                changeElement.textContent = 'Excellent Balance';
                changeElement.className = 'metric-change metric-increase';
            } else if (balanceHealth >= 60) {
                changeElement.textContent = 'Good Balance';
                changeElement.className = 'metric-change metric-stable';
            } else {
                changeElement.textContent = 'Needs Attention';
                changeElement.className = 'metric-change metric-decrease';
            }
        }
        
        function updatePopularityRanking(raceData) {
            const container = document.getElementById('popularityRanking');
            
            if (!raceData || raceData.length === 0) {
                container.innerHTML = 'No data available';
                return;
            }
            
            const sorted = [...raceData].sort((a, b) => b.count - a.count);
            const mostPopular = sorted[0];
            const leastPopular = sorted[sorted.length - 1];
            
            container.innerHTML = `
                <div style="color: #00ff00;">Most: ${mostPopular.race_name} (${mostPopular.count})</div>
                <div style="color: #ff6666;">Least: ${leastPopular.race_name} (${leastPopular.count})</div>
                <div style="color: #ffa500;">Ratio: ${(mostPopular.count / leastPopular.count).toFixed(1)}:1</div>
            `;
        }
        
        function generateActivityTimeline() {
            const container = document.getElementById('activityTimeline');
            const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
            
            // Generate sample activity data (in real implementation, this would come from API)
            const activityLevels = ['high', 'medium', 'high', 'medium', 'high', 'high', 'medium'];
            
            container.innerHTML = days.map((day, index) => `
                <div class="timeline-day ${activityLevels[index]}-activity">
                    <div>${day}</div>
                    <div style="font-size: 10px; margin-top: 2px;">
                        ${Math.floor(Math.random() * 50 + 20)}
                    </div>
                </div>
            `).join('');
            
            // Update peak hours (placeholder)
            document.getElementById('peakHours').innerHTML = `
                <div>üåÖ Morning: 8-10 AM (moderate)</div>
                <div>üåÜ Evening: 6-9 PM (high)</div>
                <div>üåô Late Night: 10 PM-12 AM (low)</div>
            `;
        }
        
        function checkForAlerts(data) {
            const alerts = [];
            
            // Check for population imbalances
            if (data.raceDistribution) {
                const totalChars = data.raceDistribution.reduce((sum, race) => sum + race.count, 0);
                const avgPerRace = totalChars / data.raceDistribution.length;
                
                data.raceDistribution.forEach(race => {
                    const deviation = Math.abs(race.count - avgPerRace) / avgPerRace;
                    if (deviation > 0.5) {
                        alerts.push({
                            type: 'warning',
                            message: `${race.race_name} population deviates ${(deviation * 100).toFixed(1)}% from average`
                        });
                    }
                });
            }
            
            // Check for low activity
            if (data.activePlayers24h < 10) {
                alerts.push({
                    type: 'critical',
                    message: 'Very low player activity in the last 24 hours'
                });
            }
            
            // Check for declining registration
            if (data.registrationsChange < -5) {
                alerts.push({
                    type: 'warning',
                    message: 'Declining new player registrations'
                });
            }
            
            displayAlerts(alerts);
        }
        
        function displayAlerts(alerts) {
            const panel = document.getElementById('alertsPanel');
            const list = document.getElementById('alertsList');
            
            if (alerts.length === 0) {
                panel.style.display = 'none';
                return;
            }
            
            list.innerHTML = alerts.map(alert => `
                <div class="alert-item alert-${alert.type}">
                    ${alert.message}
                </div>
            `).join('');
            
            panel.style.display = 'block';
        }
        
        function setupAutoRefresh() {
            const checkbox = document.getElementById('autoRefresh');
            const interval = document.getElementById('refreshInterval');
            
            function updateAutoRefresh() {
                if (refreshInterval) {
                    clearInterval(refreshInterval);
                    refreshInterval = null;
                }
                
                if (checkbox.checked) {
                    const seconds = parseInt(interval.value);
                    refreshInterval = setInterval(refreshData, seconds * 1000);
                }
            }
            
            checkbox.addEventListener('change', updateAutoRefresh);
            interval.addEventListener('change', updateAutoRefresh);
            
            updateAutoRefresh(); // Initialize
        }
        
        function exportData() {
            const csvData = generateCSVData();
            downloadCSV(csvData, `population_data_${new Date().toISOString().split('T')[0]}.csv`);
        }
        
        function generateCSVData() {
            if (!populationData.raceDistribution) {
                return 'No data available';
            }
            
            const headers = 'Race,Characters,Percentage,Active 24h,Average Level\n';
            const totalChars = populationData.raceDistribution.reduce((sum, race) => sum + race.count, 0);
            
            const rows = populationData.raceDistribution.map(race => {
                const percentage = (race.count / totalChars * 100).toFixed(1);
                return `${race.race_name},${race.count},${percentage}%,${race.active_24h || 0},${(race.avg_level || 0).toFixed(1)}`;
            }).join('\n');
            
            return headers + rows;
        }
        
        function downloadCSV(csv, filename) {
            const blob = new Blob([csv], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            a.click();
            window.URL.revokeObjectURL(url);
        }
        
        function showLoading(show) {
            document.getElementById('loadingSpinner').style.display = show ? 'block' : 'none';
        }
        
        function showError(message) {
            console.error(message);
            // You could add a toast notification here
        }
        
        function formatNumber(num) {
            return new Intl.NumberFormat().format(num);
        }
        
        // Cleanup interval on page unload
        window.addEventListener('beforeunload', function() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
        });
    </script>
</body>
</html>