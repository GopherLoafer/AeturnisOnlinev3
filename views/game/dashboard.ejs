
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aeturnis Online - <%= character.name %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
            background: 
                radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.1) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.1) 0%, transparent 50%),
                linear-gradient(135deg, #0f1419 0%, #1a1f2e 50%, #0f1419 100%);
            color: #e2e8f0;
            height: 100vh;
            overflow: hidden;
            font-size: 14px;
            line-height: 1.6;
            text-rendering: optimizeLegibility;
            font-weight: 400;
        }

        /* Main Layout */
        .game-container {
            display: grid;
            grid-template-areas:
                "left-panel main right-panel"
                "bottom-panel bottom-panel bottom-panel";
            grid-template-columns: 320px 1fr 340px;
            grid-template-rows: 1fr 240px;
            height: calc(100vh - 40px);
            gap: 20px;
            background: transparent;
            padding: 20px;
            overflow: hidden;
        }

        /* Header */
        .header {
            grid-area: header;
            background: linear-gradient(to bottom, #2a2a2a, #1a1a1a);
            border-bottom: 2px solid #444;
            display: flex;
            align-items: center;
            padding: 0 20px;
            gap: 20px;
        }

        .resource-bar {
            display: flex;
            align-items: center;
            gap: 15px;
            flex: 1;
        }

        .resource {
            display: flex;
            align-items: center;
            gap: 5px;
            background: rgba(0,0,0,0.5);
            padding: 8px 15px;
            border-radius: 20px;
            border: 1px solid #333;
        }

        .resource-icon {
            width: 24px;
            height: 24px;
            border-radius: 50%;
        }

        .gold-icon { background: linear-gradient(135deg, #FFD700, #FFA500); }
        .exp-icon { background: linear-gradient(135deg, #00ff00, #00aa00); }
        .hp-icon { background: linear-gradient(135deg, #ff0000, #cc0000); }
        .mp-icon { background: linear-gradient(135deg, #0066ff, #003399); }

        .character-name-display {
            color: #FFD700;
            font-weight: bold;
            font-size: 18px;
        }

        .prestige-marker {
            margin-left: 8px;
            font-size: 1.4em;
            text-shadow: 0 0 8px currentColor;
        }

        .prestige-marker.bronze { color: #cd7f32; }
        .prestige-marker.silver { color: #c0c0c0; }
        .prestige-marker.gold { color: #ffd700; }
        .prestige-marker.platinum { color: #e5e4e2; }
        .prestige-marker.diamond { color: #b9f2ff; }
        .prestige-marker.legendary { 
            color: #ff6b6b; 
            animation: legendaryGlow 2s ease-in-out infinite alternate;
        }

        @keyframes legendaryGlow {
            from { text-shadow: 0 0 8px #ff6b6b; }
            to { text-shadow: 0 0 20px #ff6b6b; }
        }

        /* Left Panel - Character Info */
        .left-panel {
            grid-area: left-panel;
            background: 
                linear-gradient(145deg, rgba(15, 20, 25, 0.95) 0%, rgba(20, 25, 35, 0.95) 100%);
            border: 1px solid rgba(139, 92, 246, 0.3);
            border-radius: 24px;
            padding: 16px;
            overflow-y: auto;
            backdrop-filter: blur(20px);
            box-shadow: 
                0 8px 32px rgba(0, 0, 0, 0.4),
                0 0 0 1px rgba(255, 255, 255, 0.05),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            transition: all 0.4s cubic-bezier(0.23, 1, 0.320, 1);
        }

        .left-panel:hover {
            border-color: rgba(139, 92, 246, 0.5);
            box-shadow: 
                0 12px 40px rgba(0, 0, 0, 0.5),
                0 0 0 1px rgba(139, 92, 246, 0.2),
                0 0 60px rgba(139, 92, 246, 0.1);
            transform: translateY(-2px);
        }

        .character-info {
            margin-bottom: 12px;
        }

        .character-title {
            font-size: 11px;
            color: #888;
            margin-bottom: 10px;
        }

        .character-name-small {
            font-size: 14px;
            color: #10b981;
            font-weight: 600;
            margin-bottom: 8px;
            text-align: center;
        }

        .gold-display {
            font-size: 12px;
            color: #fbbf24;
            text-align: center;
            margin-top: 4px;
        }

        /* Modular Left Panel Blocks */
        .character-block, .stats-block, .reports-block {
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #333;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            backdrop-filter: blur(10px);
        }

        .block-title {
            color: #10b981;
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 12px;
            text-align: center;
        }

        /* Left Panel Tabs */
        .left-panel-tabs {
            display: flex;
            margin-bottom: 12px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 6px;
            padding: 2px;
        }

        .left-tab-button {
            flex: 1;
            padding: 8px 4px;
            font-size: 10px;
            color: #999;
            background: transparent;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .left-tab-button.active {
            background: rgba(16, 185, 129, 0.2);
            color: #10b981;
        }

        .left-tab-button:hover {
            background: rgba(16, 185, 129, 0.1);
            color: #10b981;
        }

        .left-tab-content {
            display: none;
        }

        .left-tab-content.active {
            display: block;
        }

        .progression-info, .battle-stats-info, .achievements-info {
            font-size: 11px;
        }

        .progression-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            color: #ccc;
        }

        .stats-placeholder {
            text-align: center;
            color: #888;
        }

        .stats-placeholder p {
            margin: 8px 0;
            color: #10b981;
        }

        .placeholder-items {
            margin-top: 12px;
            text-align: left;
            font-size: 10px;
            color: #666;
        }

        .placeholder-items div {
            margin-bottom: 4px;
        }

        /* Minimap Block Styling */
        .minimap-block {
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #333;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            backdrop-filter: blur(10px);
        }

        .tabs-panel {
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #333;
            border-radius: 8px;
            padding: 0;
            backdrop-filter: blur(10px);
        }

        .stat-bars {
            margin-bottom: 10px;
        }

        .stat-bar {
            margin-bottom: 8px;
        }

        .stat-label {
            font-size: 10px;
            margin-bottom: 2px;
            display: flex;
            justify-content: space-between;
            color: #94a3b8;
            font-weight: 500;
        }

        .bar-container {
            height: 16px;
            background: rgba(20, 25, 35, 0.5);
            border-radius: 8px;
            overflow: hidden;
            position: relative;
            border: 1px solid rgba(100, 116, 139, 0.2);
        }

        .bar-fill {
            height: 100%;
            transition: width 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .bar-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .hp-bar { background: linear-gradient(90deg, #ff0000, #ff6666); }
        .mp-bar { background: linear-gradient(90deg, #0066ff, #66b3ff); }
        .exp-bar { background: linear-gradient(90deg, #00ff00, #66ff66); }

        .bar-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #fff;
            font-size: 11px;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 6px;
            font-size: 11px;
            margin-bottom: 12px;
        }

        .stat-item {
            background: rgba(20, 25, 35, 0.5);
            padding: 5px 8px;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid rgba(100, 116, 139, 0.2);
            font-size: 11px;
        }

        .stat-item span:first-child {
            color: #94a3b8;
            font-weight: 500;
            font-size: 10px;
        }

        .stat-value {
            color: #22c55e;
            font-weight: 700;
            font-size: 12px;
        }

        /* Equipment Section */
        .equipment-section h3 {
            color: #fbbf24;
            margin-bottom: 8px;
            font-size: 13px;
            border-bottom: 1px solid rgba(100, 116, 139, 0.2);
            padding-bottom: 4px;
            font-weight: 600;
        }

        .equipment-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
            margin-bottom: 12px;
        }

        .equipment-slot {
            aspect-ratio: 1;
            background: 
                linear-gradient(145deg, rgba(30, 35, 50, 0.8) 0%, rgba(25, 30, 45, 0.8) 100%);
            border: 1px solid rgba(100, 116, 139, 0.3);
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.23, 1, 0.320, 1);
            position: relative;
            overflow: hidden;
            font-size: 20px;
            color: #cbd5e1;
            backdrop-filter: blur(10px);
            box-shadow: 
                0 4px 16px rgba(0, 0, 0, 0.2),
                0 0 0 1px rgba(255, 255, 255, 0.05),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .equipment-slot::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at center, rgba(255, 255, 255, 0.05) 0%, transparent 70%);
            opacity: 0;
            transition: opacity 0.3s;
        }

        .equipment-slot:hover {
            border-color: rgba(255, 255, 255, 0.15);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
            color: #b8d4b8;
        }

        .equipment-slot:hover::before {
            opacity: 1;
        }

        .equipment-slot.equipped {
            border-color: rgba(34, 197, 94, 0.6);
            background: 
                linear-gradient(145deg, rgba(15, 40, 25, 0.9) 0%, rgba(10, 30, 20, 0.9) 100%);
            color: #22c55e;
            font-size: 24px;
            box-shadow: 
                0 4px 16px rgba(0, 0, 0, 0.2),
                0 0 32px rgba(34, 197, 94, 0.3),
                0 0 0 1px rgba(34, 197, 94, 0.2),
                inset 0 1px 0 rgba(34, 197, 94, 0.2);
        }

        .equipment-slot.equipped:hover {
            border-color: rgba(34, 197, 94, 0.8);
            box-shadow: 
                0 8px 24px rgba(0, 0, 0, 0.3),
                0 0 48px rgba(34, 197, 94, 0.4),
                0 0 0 2px rgba(34, 197, 94, 0.3);
            transform: translateY(-4px) scale(1.05);
        }

        /* Affinity Displays */
        .affinity-section {
            margin-top: 20px;
        }

        .affinity-section h4 {
            color: #FFD700;
            margin-bottom: 10px;
            font-size: 14px;
        }

        .affinity-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 6px 8px;
            background: rgba(0,0,0,0.2);
            border-radius: 4px;
            margin-bottom: 4px;
            border-left: 3px solid #333;
        }

        .affinity-name {
            font-size: 12px;
            color: #ccc;
            text-transform: capitalize;
        }

        .affinity-value {
            font-size: 12px;
            color: #00ff41;
            font-weight: bold;
        }

        /* Main Panel */
        .main-panel {
            grid-area: main;
            background: 
                linear-gradient(145deg, rgba(10, 15, 25, 0.95) 0%, rgba(15, 20, 30, 0.95) 100%);
            border: 1px solid rgba(59, 130, 246, 0.3);
            border-radius: 24px;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            backdrop-filter: blur(20px);
            box-shadow: 
                0 8px 32px rgba(0, 0, 0, 0.4),
                0 0 0 1px rgba(255, 255, 255, 0.05),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            transition: all 0.4s cubic-bezier(0.23, 1, 0.320, 1);
        }

        .game-output {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            font-family: 'Consolas', 'Monaco', monospace;
            line-height: 1.6;
            font-size: 14px;
        }

        .game-text {
            margin-bottom: 8px;
            opacity: 0;
            animation: fadeIn 0.3s forwards;
        }

        @keyframes fadeIn {
            to { opacity: 1; }
        }

        .location-text { color: #00ffff; font-weight: bold; }
        .combat-text { color: #ff6666; }
        .loot-text { color: #FFD700; }
        .system-text { color: #888; font-style: italic; }
        .damage-text { color: #ff0000; font-weight: bold; }
        .heal-text { color: #00ff00; font-weight: bold; }
        .exp-gain { color: #66ff66; font-weight: bold; }
        .level-up { color: #ffd700; font-weight: bold; animation: levelUpGlow 0.5s ease-in-out; }
        .affinity-gain { color: #ff99ff; font-style: italic; }

        @keyframes levelUpGlow {
            0%, 100% { text-shadow: none; }
            50% { text-shadow: 0 0 15px #ffd700; }
        }

        /* Action Panel */
        .action-panel {
            background: #1a1a1a;
            border-top: 1px solid #333;
            padding: 15px;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin-bottom: 15px;
        }

        .action-btn {
            background: 
                linear-gradient(145deg, rgba(30, 35, 50, 0.9) 0%, rgba(25, 30, 45, 0.9) 100%);
            border: 1px solid rgba(99, 102, 241, 0.4);
            color: #f1f5f9;
            padding: 16px 24px;
            border-radius: 16px;
            cursor: pointer;
            transition: all 0.4s cubic-bezier(0.23, 1, 0.320, 1);
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(10px);
            box-shadow: 
                0 4px 16px rgba(0, 0, 0, 0.3),
                0 0 0 1px rgba(255, 255, 255, 0.05),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transition: left 0.6s;
        }

        .action-btn:hover:not(:disabled) {
            background: 
                linear-gradient(145deg, rgba(40, 45, 65, 0.95) 0%, rgba(35, 40, 60, 0.95) 100%);
            border-color: rgba(99, 102, 241, 0.7);
            transform: translateY(-4px) scale(1.02);
            box-shadow: 
                0 12px 32px rgba(0, 0, 0, 0.4),
                0 0 40px rgba(99, 102, 241, 0.2),
                0 0 0 1px rgba(99, 102, 241, 0.3);
            color: #ffffff;
        }

        .action-btn:hover:not(:disabled)::before {
            left: 100%;
        }

        .action-btn:active:not(:disabled) {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.25);
        }

        .action-btn:disabled {
            opacity: 0.3;
            cursor: not-allowed;
            background: #0f140f;
            border-color: rgba(255, 255, 255, 0.05);
            transform: none;
        }

        .action-btn.movement { 
            border-color: rgba(34, 197, 94, 0.5); 
            color: #22c55e;
            background: linear-gradient(145deg, rgba(15, 40, 25, 0.9) 0%, rgba(10, 30, 20, 0.9) 100%);
        }
        .action-btn.movement:hover {
            border-color: rgba(34, 197, 94, 0.8);
            box-shadow: 0 12px 32px rgba(0, 0, 0, 0.4), 0 0 40px rgba(34, 197, 94, 0.3);
        }

        .action-btn.combat { 
            border-color: rgba(239, 68, 68, 0.5); 
            color: #ef4444;
            background: linear-gradient(145deg, rgba(40, 15, 15, 0.9) 0%, rgba(30, 10, 10, 0.9) 100%);
        }
        .action-btn.combat:hover {
            border-color: rgba(239, 68, 68, 0.8);
            box-shadow: 0 12px 32px rgba(0, 0, 0, 0.4), 0 0 40px rgba(239, 68, 68, 0.3);
        }

        .action-btn.special { 
            border-color: rgba(251, 191, 36, 0.5); 
            color: #fbbf24;
            background: linear-gradient(145deg, rgba(40, 35, 15, 0.9) 0%, rgba(30, 25, 10, 0.9) 100%);
        }
        .action-btn.special:hover {
            border-color: rgba(251, 191, 36, 0.8);
            box-shadow: 0 12px 32px rgba(0, 0, 0, 0.4), 0 0 40px rgba(251, 191, 36, 0.3);
        }

        /* Right Panel */
        .right-panel {
            grid-area: right-panel;
            background: 
                linear-gradient(145deg, rgba(15, 20, 25, 0.95) 0%, rgba(20, 25, 35, 0.95) 100%);
            border: 1px solid rgba(34, 197, 94, 0.3);
            border-radius: 24px;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            backdrop-filter: blur(20px);
            box-shadow: 
                0 8px 32px rgba(0, 0, 0, 0.4),
                0 0 0 1px rgba(255, 255, 255, 0.05),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            transition: all 0.4s cubic-bezier(0.23, 1, 0.320, 1);
        }

        .right-panel:hover {
            border-color: rgba(34, 197, 94, 0.5);
            box-shadow: 
                0 12px 40px rgba(0, 0, 0, 0.5),
                0 0 0 1px rgba(34, 197, 94, 0.2),
                0 0 60px rgba(34, 197, 94, 0.1);
            transform: translateY(-2px);
        }

        .panel-tabs {
            display: flex;
            background: #0a0a0a;
            border-bottom: 1px solid #333;
        }

        .tab {
            flex: 1;
            padding: 14px 12px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            font-size: 13px;
            background: transparent;
            border: none;
            color: #8fa58f;
            font-weight: 500;
            letter-spacing: 0.3px;
            position: relative;
        }

        .tab:hover {
            background: rgba(0, 255, 65, 0.08);
            color: #b8d4b8;
            transform: translateY(-1px);
        }

        .tab.active {
            background: rgba(0, 255, 65, 0.12);
            color: #00ff41;
            box-shadow: 
                inset 0 -2px 0 #00ff41,
                0 2px 8px rgba(0, 255, 65, 0.15);
        }

        .tab.active::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 20%;
            right: 20%;
            height: 2px;
            background: linear-gradient(90deg, transparent, #00ff41, transparent);
            animation: tabPulse 2s ease-in-out infinite alternate;
        }

        @keyframes tabPulse {
            from { opacity: 0.5; }
            to { opacity: 1; }
        }

        .tab-content {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Inventory Grid */
        .inventory-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 6px;
            margin-bottom: 20px;
        }

        .inventory-slot {
            aspect-ratio: 1;
            background: #2a2a2a;
            border: 1px solid #444;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 14px;
            position: relative;
            transition: all 0.2s;
        }

        .inventory-slot:hover {
            transform: scale(1.05);
            border-color: #666;
        }

        .inventory-slot.filled {
            background: #003300;
            border-color: #00ff00;
        }

        .item-count {
            position: absolute;
            bottom: 2px;
            right: 2px;
            font-size: 10px;
            color: #FFD700;
            font-weight: bold;
            background: rgba(0,0,0,0.7);
            padding: 1px 3px;
            border-radius: 2px;
        }

        /* Progress Section */
        .progress-section h4 {
            color: #fbbf24;
            margin-bottom: 8px;
            font-size: 13px;
            font-weight: 600;
        }

        .progress-buttons {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 6px;
            margin-bottom: 10px;
        }

        .progress-btn {
            background: rgba(20, 25, 35, 0.5);
            border: 1px solid rgba(34, 197, 94, 0.3);
            color: #22c55e;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-family: inherit;
            font-size: 11px;
            transition: all 0.2s;
        }

        .progress-btn:hover {
            background: rgba(0, 255, 65, 0.1);
            box-shadow: 0 0 8px rgba(0, 255, 65, 0.3);
        }

        .progress-messages {
            max-height: 60px;
            overflow-y: auto;
            background: rgba(20, 25, 35, 0.3);
            border: 1px solid rgba(100, 116, 139, 0.2);
            border-radius: 8px;
            padding: 4px;
        }

        .progression-message {
            margin-bottom: 3px;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 10px;
            border-left: 2px solid;
            animation: fadeIn 0.3s ease-in;
        }

        .progression-message.success {
            background: rgba(0, 255, 65, 0.1);
            border-left-color: #00ff41;
            color: #00ff41;
        }

        .progression-message.error {
            background: rgba(255, 69, 69, 0.1);
            border-left-color: #ff4545;
            color: #ff4545;
        }

        .progression-message.level-up {
            background: rgba(255, 215, 0, 0.1);
            border-left-color: #ffd700;
            color: #ffd700;
            font-weight: bold;
        }

        /* Bottom Panel - Chat */
        .bottom-panel {
            grid-area: bottom-panel;
            background: 
                linear-gradient(145deg, rgba(15, 20, 25, 0.95) 0%, rgba(20, 25, 35, 0.95) 100%);
            border: 1px solid rgba(236, 72, 153, 0.3);
            border-radius: 24px 24px 0 0;
            display: flex;
            flex-direction: column;
            backdrop-filter: blur(20px);
            box-shadow: 
                0 -8px 32px rgba(0, 0, 0, 0.4),
                0 0 0 1px rgba(255, 255, 255, 0.05),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .chat-tabs {
            display: flex;
            background: #0a0a0a;
            border-bottom: 1px solid #333;
        }

        .chat-tab {
            padding: 8px 16px;
            background: transparent;
            border: none;
            color: #666;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s;
        }

        .chat-tab:hover {
            color: #ccc;
        }

        .chat-tab.active {
            color: #00ff00;
            border-bottom: 2px solid #00ff00;
        }

        .chat-messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            font-size: 13px;
        }

        .chat-message {
            margin-bottom: 4px;
            opacity: 0;
            animation: fadeIn 0.3s forwards;
        }

        .chat-name {
            font-weight: bold;
            cursor: pointer;
        }

        .chat-name:hover {
            text-decoration: underline;
        }

        .chat-name.global { color: #ffffff; }
        .chat-name.guild { color: #00ff00; }
        .chat-name.party { color: #66b3ff; }
        .chat-name.system { color: #FFD700; }

        .chat-input-container {
            display: flex;
            padding: 10px;
            gap: 10px;
            background: #0a0a0a;
            border-top: 1px solid #333;
        }

        .chat-input {
            flex: 1;
            background: #1a1a1a;
            border: 1px solid #444;
            color: #fff;
            padding: 8px;
            border-radius: 4px;
            font-size: 13px;
            font-family: inherit;
        }

        .chat-input:focus {
            outline: none;
            border-color: #00ff41;
            box-shadow: 0 0 5px rgba(0, 255, 65, 0.3);
        }

        .chat-send {
            background: linear-gradient(to bottom, #0066ff, #0044cc);
            border: none;
            color: white;
            padding: 8px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.2s;
        }

        .chat-send:hover {
            background: linear-gradient(to bottom, #0077ff, #0055dd);
            transform: scale(1.05);
        }

        /* Mobile Responsive */
        @media (max-width: 1024px) {
            .game-container {
                grid-template-columns: 250px 1fr 250px;
            }
        }

        @media (max-width: 768px) {
            .game-container {
                grid-template-areas:
                    "header"
                    "main"
                    "bottom-panel";
                grid-template-columns: 1fr;
                grid-template-rows: 60px 1fr 150px;
            }

            .left-panel, .right-panel {
                display: none;
            }

            .quick-actions {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        /* Character Name Header */
        .character-name-header {
            font-size: 18px;
            font-weight: 700;
            color: #f8fafc;
            margin-bottom: 12px;
            text-align: center;
            padding: 10px 16px;
            background: 
                linear-gradient(145deg, rgba(30, 35, 50, 0.8) 0%, rgba(25, 30, 45, 0.8) 100%);
            border-radius: 12px;
            border: 1px solid rgba(139, 92, 246, 0.4);
            backdrop-filter: blur(10px);
            box-shadow: 
                0 2px 8px rgba(0, 0, 0, 0.2),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            letter-spacing: 0.5px;
        }

        .resource-display {
            font-size: 11px;
            color: #22c55e;
            text-align: center;
            margin-bottom: 10px;
            padding: 4px 8px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 8px;
            line-height: 1.3;
        }

        /* Settings Dropdown */
        .settings-dropdown {
            position: relative;
            margin-left: auto;
        }

        .settings-btn {
            background: rgba(255, 255, 255, 0.1) !important;
        }

        .dropdown-menu {
            position: absolute;
            top: 100%;
            right: 0;
            background: #2a2a2a;
            border: 1px solid #444;
            border-radius: 4px;
            min-width: 120px;
            z-index: 1000;
            display: none;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }

        .dropdown-menu.show {
            display: block;
        }

        .dropdown-item {
            display: block;
            padding: 8px 12px;
            color: #e0e0e0;
            text-decoration: none;
            font-size: 12px;
            border-bottom: 1px solid #333;
            transition: background 0.2s;
        }

        .dropdown-item:last-child {
            border-bottom: none;
        }

        .dropdown-item:hover {
            background: rgba(0, 255, 65, 0.1);
            color: #00ff41;
        }

        /* Mini-map (Reference Design) */
        .mini-map {
            height: 160px;
            background: 
                linear-gradient(145deg, rgba(10, 15, 25, 0.9) 0%, rgba(15, 20, 30, 0.9) 100%);
            border-bottom: 1px solid rgba(34, 197, 94, 0.2);
            border-radius: 16px 16px 0 0;
            position: relative;
            overflow: hidden;
            backdrop-filter: blur(15px);
            box-shadow: 
                inset 0 1px 0 rgba(255, 255, 255, 0.1),
                0 2px 8px rgba(0, 0, 0, 0.2);
        }

        .map-location-header {
            background: 
                linear-gradient(135deg, rgba(20, 25, 35, 0.95) 0%, rgba(25, 30, 40, 0.95) 100%);
            color: #06b6d4;
            font-weight: 700;
            text-align: center;
            padding: 8px 15px;
            border-bottom: 1px solid rgba(34, 197, 94, 0.2);
            font-size: 13px;
            letter-spacing: 0.5px;
            border-radius: 20px 20px 0 0;
            box-shadow: 
                0 2px 8px rgba(0, 0, 0, 0.2),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
        }

        .map-grid {
            display: grid;
            grid-template-columns: repeat(9, 1fr);
            grid-template-rows: repeat(9, 1fr);
            height: calc(100% - 26px);
            padding: 6px;
            gap: 1px;
        }

        .map-cell {
            background: #1a1a1a;
            border: 1px solid #333;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 10px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .map-cell:hover {
            background: #2a2a2a;
            border-color: #555;
        }

        .map-cell.current {
            background: #003300;
            border-color: #00ff00;
            box-shadow: 0 0 10px #00ff00;
            color: #00ff00;
        }

        .map-cell.player {
            background: #000033;
            border-color: #0066ff;
            color: #0066ff;
        }

        .map-cell.enemy {
            background: #330000;
            border-color: #ff0000;
            color: #ff0000;
        }

        .map-cell.npc {
            background: #333300;
            border-color: #ffff00;
            color: #ffff00;
        }

        .map-cell.treasure {
            background: #1a1a0a;
            border-color: #ffd700;
            color: #ffd700;
        }

        .map-cell.danger {
            background: #330011;
            border-color: #ff6600;
            color: #ff6600;
        }

        .map-cell.exit {
            background: #0a1a0a;
            border-color: #00cc00;
            color: #00cc00;
        }

        .map-cell.obstacle {
            background: #2a2a1a;
            border-color: #888;
            color: #888;
        }

        .map-cell.water {
            background: #001122;
            border-color: #0088cc;
            color: #0088cc;
        }

        .map-cell.resource {
            background: #112200;
            border-color: #44aa44;
            color: #44aa44;
        }

        .map-cell.hidden {
            background: #1a0a1a;
            border-color: #aa44aa;
            color: #aa44aa;
        }

        /* Combat Actions */
        .combat-actions {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .action-btn.primary {
            background: rgba(255, 69, 69, 0.2);
            border-color: #ff4545;
            color: #ff4545;
            font-weight: bold;
        }

        .action-btn.secondary {
            background: rgba(138, 43, 226, 0.2);
            border-color: #8a2be2;
            color: #8a2be2;
        }

        /* Race Abilities */
        .ability-item {
            background: rgba(0, 50, 0, 0.2);
            border: 1px solid #333;
            border-radius: 4px;
            margin-bottom: 8px;
            padding: 10px;
        }

        .ability-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 6px;
        }

        .ability-name {
            color: #00ff41;
            font-weight: bold;
            font-size: 13px;
        }

        .ability-type {
            background: rgba(0, 0, 0, 0.5);
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 10px;
            color: #666;
        }

        .ability-type.active {
            color: #ffff00;
        }

        .ability-description {
            font-size: 11px;
            color: #ccc;
            margin-bottom: 6px;
            line-height: 1.3;
        }

        .ability-btn {
            background: #333;
            border: 1px solid #00ff41;
            color: #00ff41;
            padding: 4px 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 10px;
            font-family: inherit;
        }

        .ability-btn:hover:not(:disabled) {
            background: rgba(0, 255, 65, 0.1);
        }

        .ability-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .loading, .error, .no-abilities {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 20px;
        }
    </style>
</head>
<body>
    <div class="game-container">


        <!-- Left Panel - Modular Blocks -->
        <aside class="left-panel">
            <!-- Character Info Block -->
            <div class="character-block">
                <div class="character-title"><%= character.race_name %></div>
                <div class="character-name-small">
                    <%= character.name %> - Level <span id="character-level"><%= character.level %></span>
                    <% if (character.prestige_marker) { %>
                        <span class="prestige-marker <%= character.prestige_marker %>">
                            <% if (character.prestige_marker === 'bronze') { %>🥉<% } %>
                            <% if (character.prestige_marker === 'silver') { %>🥈<% } %>
                            <% if (character.prestige_marker === 'gold') { %>🥇<% } %>
                            <% if (character.prestige_marker === 'platinum') { %>💎<% } %>
                            <% if (character.prestige_marker === 'diamond') { %>💠<% } %>
                            <% if (character.prestige_marker === 'legendary') { %>⭐<% } %>
                        </span>
                    <% } %>
                </div>
                <div class="stat-bar">
                    <div class="stat-label">
                        <span>Health</span>
                        <span id="health-display"><%= character.health_current %>/<%= character.health_max %></span>
                    </div>
                    <div class="bar-container">
                        <div class="bar-fill health-bar" id="health-bar" style="width: <%= (character.health_current / character.health_max) * 100 %>%"></div>
                        <div class="bar-text" id="health-text"><%= Math.round((character.health_current / character.health_max) * 100) %>%</div>
                    </div>
                </div>
                <div class="stat-bar">
                    <div class="stat-label">
                        <span>Mana</span>
                        <span id="mana-display"><%= character.mana_current %>/<%= character.mana_max %></span>
                    </div>
                    <div class="bar-container">
                        <div class="bar-fill mana-bar" id="mana-bar" style="width: <%= (character.mana_current / character.mana_max) * 100 %>%"></div>
                        <div class="bar-text" id="mana-text"><%= Math.round((character.mana_current / character.mana_max) * 100) %>%</div>
                    </div>
                </div>
                <div class="stat-bar">
                    <div class="stat-label">
                        <span>Experience</span>
                        <span><%= progression.progressPercentage %>% to next</span>
                    </div>
                    <div class="bar-container">
                        <div class="bar-fill exp-bar" id="exp-bar" style="width: <%= progression.progressPercentage %>%"></div>
                        <div class="bar-text" id="exp-text"><%= progression.progressPercentage %>%</div>
                    </div>
                </div>
                <div class="gold-display">
                    💰 <%= character.gold.toLocaleString() %> Gold
                </div>
            </div>

            <!-- Stats Block -->
            <div class="stats-block">
                <h3 class="block-title">Character Stats</h3>
                <div class="stats-grid">
                    <div class="stat-item">
                        <span>STR</span>
                        <span class="stat-value" id="stat-str"><%= character.str_total %></span>
                    </div>
                    <div class="stat-item">
                        <span>INT</span>
                        <span class="stat-value" id="stat-int"><%= character.int_total %></span>
                    </div>
                    <div class="stat-item">
                        <span>VIT</span>
                        <span class="stat-value" id="stat-vit"><%= character.vit_total %></span>
                    </div>
                    <div class="stat-item">
                        <span>DEX</span>
                        <span class="stat-value" id="stat-dex"><%= character.dex_total %></span>
                    </div>
                    <div class="stat-item">
                        <span>WIS</span>
                        <span class="stat-value" id="stat-wis"><%= character.wis_total %></span>
                    </div>
                    <div class="stat-item">
                        <span>LUK</span>
                        <span class="stat-value" id="stat-luk"><%= character.luk_total %></span>
                    </div>
                </div>
            </div>

            <!-- Reports Tabs Block -->
            <div class="reports-block">
                <div class="left-panel-tabs">
                    <button class="left-tab-button active" onclick="switchLeftTab('progression')">Progression</button>
                    <button class="left-tab-button" onclick="switchLeftTab('battle-stats')">Battle Stats</button>
                    <button class="left-tab-button" onclick="switchLeftTab('achievements')">Achievements</button>
                </div>

                <!-- Progression Tab -->
                <div id="left-progression" class="left-tab-content active">
                    <div class="progression-info">
                        <div class="progression-item">
                            <span>Current Level:</span>
                            <span><%= character.level %></span>
                        </div>
                        <div class="progression-item">
                            <span>Total Experience:</span>
                            <span><%= parseFloat(character.experience || 0).toLocaleString() %></span>
                        </div>
                        <div class="progression-item">
                            <span>Next Level Req:</span>
                            <span><%= (progression.expNeededForNext || 0).toLocaleString() %></span>
                        </div>
                    </div>
                </div>

                <!-- Battle Stats Tab -->
                <div id="left-battle-stats" class="left-tab-content">
                    <div class="battle-stats-info">
                        <div class="stats-placeholder">
                            <p>📊 Battle Statistics</p>
                            <p>Coming Soon...</p>
                            <div class="placeholder-items">
                                <div>• Enemies Defeated</div>
                                <div>• Damage Dealt</div>
                                <div>• Damage Taken</div>
                                <div>• Combat Efficiency</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Achievements Tab -->
                <div id="left-achievements" class="left-tab-content">
                    <div class="achievements-info">
                        <div class="stats-placeholder">
                            <p>🏆 Achievement Tracker</p>
                            <p>Coming Soon...</p>
                            <div class="placeholder-items">
                                <div>• Milestone Rewards</div>
                                <div>• Exploration Progress</div>
                                <div>• Special Accomplishments</div>
                                <div>• Rare Item Discoveries</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </aside>
        <!-- Main Game Area -->
        <main class="main-panel">
            <div class="game-output" id="game-output">
                <p class="game-text system-text">The ancient trees loom overhead, blocking out most of the sunlight. You hear strange noises in the distance.</p>
                <p class="game-text">You move north into the shadowy depths.</p>
                <p class="game-text combat-text">A Wild Dire Wolf (Level <%= Math.min(character.level + 3, character.level * 1.1) %>) appears!</p>
                <p class="game-text">You attack with your weapon!</p>
                <p class="game-text damage-text">Critical Hit! You deal <%= Math.floor(character.str_total * 2.5 + Math.random() * 100) %> damage!</p>
                <p class="game-text">The Dire Wolf strikes back with its claws!</p>
                <p class="game-text damage-text">You take <%= Math.floor(50 + Math.random() * 50) %> damage.</p>
                <p class="game-text">You cast a fire spell!</p>
                <p class="game-text damage-text">You deal <%= Math.floor(character.int_total * 3 + Math.random() * 200) %> fire damage!</p>
                <p class="game-text combat-text">You have defeated the Dire Wolf!</p>
                <p class="game-text loot-text">You gain <%= Math.floor(character.level * 25 + Math.random() * 500) %> experience points!</p>
                <p class="game-text loot-text">You loot: <%= Math.floor(character.level * 5 + Math.random() * 100) %> gold, Wolf Pelt (x2), Health Potion</p>
                <p class="game-text affinity-gain">Your sword mastery increases! (<%= Math.floor(Math.random() * 100) %>/100)</p>
            </div>

            <div class="action-panel">
                <div class="combat-actions">
                    <button class="action-btn combat primary" onclick="performAction('fight')">⚔️ Fight</button>
                    <button class="action-btn combat secondary" onclick="performAction('cast')">🔮 Cast</button>
                    <button class="action-btn special" onclick="performAction('rest')">💤 Rest</button>
                </div>
            </div>
        </main>

        <!-- Right Panel - Minimap and Tabs -->
        <aside class="right-panel">
            <!-- Standalone Minimap Block -->
            <div class="minimap-block">
                <div class="map-location-header">
                    🌋 <%= character.location_zone.replace('_', ' ').toUpperCase() %>
                </div>
                <div class="map-grid">
                    <div class="map-cell"></div>
                    <div class="map-cell npc">🏪</div>
                    <div class="map-cell"></div>
                    <div class="map-cell"></div>
                    <div class="map-cell enemy">!</div>
                    <div class="map-cell"></div>
                        <button class="tab-button settings-btn" onclick="toggleSettingsDropdown()">⚙️</button>
                        <div class="dropdown-menu" id="settings-dropdown">
                            <% if (user.is_admin) { %>
                                <a href="/admin" class="dropdown-item">Admin Panel</a>
                            <% } %>
                            <a href="/logout" class="dropdown-item">Logout</a>
                        </div>
                    </div>
                </div>

            <!-- Equipment Tab -->
            <div id="equipment" class="tab-content active">

                    <div class="map-location-header">
                        🌋 <%= character.location_zone.replace('_', ' ').toUpperCase() %>
                    </div>
                    <div class="map-grid">
                        <div class="map-cell"></div>
                        <div class="map-cell npc">🏪</div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell enemy">!</div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell player">P</div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell enemy">!</div>
                        <div class="map-cell"></div>
                        
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell current" onclick="move('north')">@</div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell" onclick="move('west')"></div>
                        <div class="map-cell treasure">💎</div>
                        <div class="map-cell" onclick="move('east')"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell" onclick="move('south')"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell danger">⚠️</div>
                        <div class="map-cell"></div>
                        
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell exit">🚪</div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        
                        <div class="map-cell"></div>
                        <div class="map-cell obstacle">🗿</div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell water">🌊</div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell resource">🌳</div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell hidden">?</div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                        <div class="map-cell"></div>
                    </div>
                </div>
                
                <div class="equipment-section">
                    <h3>Equipment</h3>
                    <div class="equipment-grid">
                        <div class="equipment-slot equipped">⛑️</div>
                        <div class="equipment-slot equipped">🛡️</div>
                        <div class="equipment-slot equipped">👖</div>
                        <div class="equipment-slot equipped">⚔️</div>
                        <div class="equipment-slot">🛡️</div>
                        <div class="equipment-slot equipped">👢</div>
                        <div class="equipment-slot equipped">💍</div>
                        <div class="equipment-slot equipped">💍</div>
                        <div class="equipment-slot">📿</div>
                    </div>
                </div>
            </div>

            <!-- Inventory Tab -->
            <div id="inventory" class="tab-content">
                <div class="inventory-grid">
                    <div class="inventory-slot filled">⚔️</div>
                    <div class="inventory-slot filled">🛡️</div>
                    <div class="inventory-slot filled">🧪<span class="item-count">12</span></div>
                    <div class="inventory-slot filled">🧪<span class="item-count">8</span></div>
                    <div class="inventory-slot filled">🥩<span class="item-count">25</span></div>
                    <div class="inventory-slot filled">💎</div>
                    <div class="inventory-slot filled">📜</div>
                    <div class="inventory-slot filled">🗝️<span class="item-count">3</span></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                </div>
            </div>

            <!-- Affinities Tab -->
            <div id="affinities" class="tab-content">
                <div class="affinity-section">
                    <h4>Weapon Affinities</h4>
                    <% weaponAffinities.forEach(function(affinity) { %>
                    <div class="affinity-item">
                        <span class="affinity-name"><%= affinity.weapon_type %></span>
                        <span class="affinity-value"><%= parseFloat(affinity.affinity_percentage).toFixed(1) %>%</span>
                    </div>
                    <% }); %>
                    
                    <h4 style="margin-top: 15px;">Magic Affinities</h4>
                    <% magicAffinities.forEach(function(affinity) { %>
                    <div class="affinity-item">
                        <span class="affinity-name"><%= affinity.magic_school %></span>
                        <span class="affinity-value"><%= parseFloat(affinity.affinity_percentage).toFixed(1) %>%</span>
                    </div>
                    <% }); %>
                </div>
            </div>

            <!-- Abilities Tab -->
            <div id="abilities" class="tab-content">
                <h4 style="color: #FFD700; margin-bottom: 15px;">Race Abilities</h4>
                <div id="race-abilities">
                    <div class="loading">Loading abilities...</div>
                </div>
            </div>
        </aside>

        <!-- Bottom Panel - Chat -->
        <section class="bottom-panel">
            <div class="chat-tabs">
                <button class="chat-tab active" data-channel="all">All</button>
                <button class="chat-tab" data-channel="global">Global</button>
                <button class="chat-tab" data-channel="guild">Guild</button>
                <button class="chat-tab" data-channel="party">Party</button>
                <button class="chat-tab" data-channel="system">System</button>
            </div>

            <div class="chat-messages" id="chat-messages">
                <div class="chat-message">
                    <span class="chat-name global">DragonSlayer:</span>
                    <span>Anyone want to group for Demon Tower?</span>
                </div>
                <div class="chat-message">
                    <span class="chat-name guild">[Guild] MysticMage:</span>
                    <span>Guild raid starts in 30 minutes!</span>
                </div>
                <div class="chat-message">
                    <span class="chat-name system">System:</span>
                    <span>Welcome to Aeturnis Online! Type /help for commands.</span>
                </div>
            </div>

            <div class="chat-input-container">
                <input type="text" class="chat-input" id="chat-input" placeholder="Type message or command...">
                <button class="chat-send" onclick="sendChatMessage()">Send</button>
            </div>
        </section>
    </div>

    <script src="/js/game.js"></script>
    <script>
        // Tab switching is handled by game.js

        // Chat functionality
        function sendChatMessage() {
            const chatInput = document.getElementById('chat-input');
            const message = chatInput.value.trim();
            
            if (message) {
                // Add message to chat (in real implementation, this would go through the server)
                addChatMessage('You', message, 'global');
                chatInput.value = '';
            }
        }

        function addChatMessage(name, message, type = 'global') {
            const chatMessages = document.getElementById('chat-messages');
            const messageElement = document.createElement('div');
            messageElement.className = 'chat-message';
            messageElement.innerHTML = `
                <span class="chat-name ${type}">${name}:</span>
                <span>${message}</span>
            `;
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Game text functionality
        function updateGameText(message) {
            const gameOutput = document.getElementById('game-output');
            const messageElement = document.createElement('p');
            messageElement.className = 'game-text';
            messageElement.innerHTML = message;
            gameOutput.appendChild(messageElement);
            
            // Scroll only the game output container, not the page
            setTimeout(() => {
                gameOutput.scrollTop = gameOutput.scrollHeight;
            }, 0);
            
            // Keep only last 50 messages for performance
            while (gameOutput.children.length > 50) {
                gameOutput.removeChild(gameOutput.firstChild);
            }
        }

        // Chat tab functionality
        document.querySelectorAll('.chat-tab').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('.chat-tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Chat input handling
        document.getElementById('chat-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendChatMessage();
            }
        });

        // Initialize abilities when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadRaceAbilities();
        });

        async function loadRaceAbilities() {
            try {
                const response = await fetch('/api/abilities/race-abilities/<%= character.id %>');
                const data = await response.json();
                
                const abilitiesContainer = document.getElementById('race-abilities');
                if (data.success && data.abilities && data.abilities.length > 0) {
                    abilitiesContainer.innerHTML = data.abilities.map(ability => `
                        <div class="ability-item">
                            <div class="ability-header">
                                <span class="ability-name">${ability.ability_name}</span>
                                <span class="ability-type ${ability.ability_type}">${ability.ability_type}</span>
                            </div>
                            <div class="ability-description">${ability.description}</div>
                            ${ability.ability_type === 'active' ? `
                                <button class="ability-btn" onclick="useAbility('${ability.ability_name}')" 
                                        ${ability.on_cooldown ? 'disabled' : ''}>
                                    ${ability.on_cooldown ? `Cooldown: ${ability.cooldown_remaining}s` : 'Use'}
                                </button>
                            ` : ''}
                        </div>
                    `).join('');
                } else {
                    abilitiesContainer.innerHTML = '<div class="no-abilities">No race abilities available</div>';
                }
            } catch (error) {
                console.error('Error loading abilities:', error);
                document.getElementById('race-abilities').innerHTML = '<div class="error">Failed to load abilities</div>';
            }
        }

        async function useAbility(abilityName) {
            try {
                const response = await fetch('/api/abilities/use-ability', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ ability_name: abilityName })
                });
                
                const data = await response.json();
                if (data.success) {
                    updateGameText(`<span class="heal-text">Used ability: ${abilityName}. ${data.message}</span>`);
                    loadRaceAbilities(); // Reload to update cooldowns
                } else {
                    updateGameText(`<span class="damage-text">Failed to use ${abilityName}: ${data.error}</span>`);
                }
            } catch (error) {
                console.error('Error using ability:', error);
                updateGameText(`<span class="damage-text">Error using ability: ${abilityName}</span>`);
            }
        }

        // Add some simulated activity
        setInterval(() => {
            const messages = [
                'A gentle breeze rustles through the trees.',
                'You hear distant footsteps echoing in the cavern.',
                'The sound of flowing water can be heard nearby.',
                'Strange shadows move at the edge of your vision.'
            ];
            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
            updateGameText(`<span class="system-text">${randomMessage}</span>`);
        }, 30000); // Every 30 seconds

        // Settings dropdown functionality
        function toggleSettingsDropdown() {
            const dropdown = document.getElementById('settings-dropdown');
            dropdown.classList.toggle('show');
        }

        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            const settingsDropdown = document.querySelector('.settings-dropdown');
            const dropdown = document.getElementById('settings-dropdown');
            
            if (settingsDropdown && !settingsDropdown.contains(event.target)) {
                dropdown.classList.remove('show');
            }
        });

        // Left panel tab switching
        function switchLeftTab(tabName) {
            // Hide all left tab content
            const leftTabContents = document.querySelectorAll('.left-tab-content');
            leftTabContents.forEach(content => {
                content.classList.remove('active');
            });

            // Remove active class from all left tab buttons
            const leftTabButtons = document.querySelectorAll('.left-tab-button');
            leftTabButtons.forEach(button => {
                button.classList.remove('active');
            });

            // Show the selected tab content
            const selectedContent = document.getElementById(`left-${tabName}`);
            if (selectedContent) {
                selectedContent.classList.add('active');
            }

            // Add active class to the clicked button (using event.target if available)
            if (typeof event !== 'undefined' && event.target) {
                event.target.classList.add('active');
            } else {
                // Fallback: find the button based on tabName
                const targetButton = document.querySelector(`[onclick="switchLeftTab('${tabName}')"]`);
                if (targetButton) {
                    targetButton.classList.add('active');
                }
            }
        }

        // Prevent auto-scrolling on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Ensure page starts at top
            window.scrollTo(0, 0);
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
            
            // Disable any automatic scrolling behavior
            document.body.style.overflow = 'hidden';
            document.documentElement.style.overflow = 'hidden';
        });

        // Prevent any scroll events from bubbling up to the window
        document.getElementById('game-output').addEventListener('scroll', function(e) {
            e.stopPropagation();
        });
    </script>
</body>
</html>
