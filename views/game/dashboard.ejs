
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aeturnis Online - <%= character.name %></title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
            background: #0a0a0a;
            color: #e0e0e0;
            height: 100vh;
            overflow: hidden;
            font-size: 14px;
        }

        /* Main Layout */
        .game-container {
            display: grid;
            grid-template-areas:
                "header header header"
                "left-panel main right-panel"
                "bottom-panel bottom-panel bottom-panel";
            grid-template-columns: 280px 1fr 280px;
            grid-template-rows: 80px 1fr 200px;
            height: 100vh;
            gap: 2px;
            background: #1a1a1a;
            padding: 2px;
        }

        /* Header */
        .header {
            grid-area: header;
            background: linear-gradient(to bottom, #2a2a2a, #1a1a1a);
            border-bottom: 2px solid #444;
            display: flex;
            align-items: center;
            padding: 0 20px;
            gap: 20px;
        }

        .resource-bar {
            display: flex;
            align-items: center;
            gap: 15px;
            flex: 1;
        }

        .resource {
            display: flex;
            align-items: center;
            gap: 5px;
            background: rgba(0,0,0,0.5);
            padding: 8px 15px;
            border-radius: 20px;
            border: 1px solid #333;
        }

        .resource-icon {
            width: 24px;
            height: 24px;
            border-radius: 50%;
        }

        .gold-icon { background: linear-gradient(135deg, #FFD700, #FFA500); }
        .exp-icon { background: linear-gradient(135deg, #00ff00, #00aa00); }
        .hp-icon { background: linear-gradient(135deg, #ff0000, #cc0000); }
        .mp-icon { background: linear-gradient(135deg, #0066ff, #003399); }

        .character-name-display {
            color: #FFD700;
            font-weight: bold;
            font-size: 18px;
        }

        .prestige-marker {
            margin-left: 8px;
            font-size: 1.4em;
            text-shadow: 0 0 8px currentColor;
        }

        .prestige-marker.bronze { color: #cd7f32; }
        .prestige-marker.silver { color: #c0c0c0; }
        .prestige-marker.gold { color: #ffd700; }
        .prestige-marker.platinum { color: #e5e4e2; }
        .prestige-marker.diamond { color: #b9f2ff; }
        .prestige-marker.legendary { 
            color: #ff6b6b; 
            animation: legendaryGlow 2s ease-in-out infinite alternate;
        }

        @keyframes legendaryGlow {
            from { text-shadow: 0 0 8px #ff6b6b; }
            to { text-shadow: 0 0 20px #ff6b6b; }
        }

        /* Left Panel - Character Info */
        .left-panel {
            grid-area: left-panel;
            background: #1a1a1a;
            border: 1px solid #333;
            padding: 15px;
            overflow-y: auto;
        }

        .character-info {
            margin-bottom: 20px;
        }

        .character-title {
            font-size: 16px;
            color: #888;
            margin-bottom: 10px;
        }

        .stat-bars {
            margin-bottom: 15px;
        }

        .stat-bar {
            margin-bottom: 12px;
        }

        .stat-label {
            font-size: 12px;
            margin-bottom: 4px;
            display: flex;
            justify-content: space-between;
            color: #ccc;
        }

        .bar-container {
            height: 22px;
            background: #333;
            border-radius: 11px;
            overflow: hidden;
            position: relative;
            border: 1px solid #555;
        }

        .bar-fill {
            height: 100%;
            transition: width 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .bar-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            animation: shimmer 2s infinite;
        }

        @keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .hp-bar { background: linear-gradient(90deg, #ff0000, #ff6666); }
        .mp-bar { background: linear-gradient(90deg, #0066ff, #66b3ff); }
        .exp-bar { background: linear-gradient(90deg, #00ff00, #66ff66); }

        .bar-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #fff;
            font-size: 11px;
            font-weight: bold;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.8);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            font-size: 13px;
            margin-bottom: 20px;
        }

        .stat-item {
            background: rgba(0,0,0,0.3);
            padding: 8px 10px;
            border-radius: 6px;
            display: flex;
            justify-content: space-between;
            border: 1px solid #333;
        }

        .stat-value {
            color: #00ff00;
            font-weight: bold;
        }

        /* Equipment Section */
        .equipment-section h3 {
            color: #FFD700;
            margin-bottom: 15px;
            font-size: 16px;
            border-bottom: 1px solid #333;
            padding-bottom: 5px;
        }

        .equipment-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
            margin-bottom: 20px;
        }

        .equipment-slot {
            aspect-ratio: 1;
            background: #2a2a2a;
            border: 2px solid #444;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
            overflow: hidden;
            font-size: 12px;
            color: #666;
        }

        .equipment-slot:hover {
            border-color: #666;
            transform: scale(1.05);
        }

        .equipment-slot.equipped {
            border-color: #00ff00;
            background: radial-gradient(ellipse at center, #003300, #2a2a2a);
            color: #fff;
            font-size: 16px;
        }

        /* Affinity Displays */
        .affinity-section {
            margin-top: 20px;
        }

        .affinity-section h4 {
            color: #FFD700;
            margin-bottom: 10px;
            font-size: 14px;
        }

        .affinity-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 6px 8px;
            background: rgba(0,0,0,0.2);
            border-radius: 4px;
            margin-bottom: 4px;
            border-left: 3px solid #333;
        }

        .affinity-name {
            font-size: 12px;
            color: #ccc;
            text-transform: capitalize;
        }

        .affinity-value {
            font-size: 12px;
            color: #00ff41;
            font-weight: bold;
        }

        /* Main Panel */
        .main-panel {
            grid-area: main;
            background: #0f0f0f;
            border: 1px solid #333;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .game-output {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            font-family: 'Consolas', 'Monaco', monospace;
            line-height: 1.6;
            font-size: 14px;
        }

        .game-text {
            margin-bottom: 8px;
            opacity: 0;
            animation: fadeIn 0.3s forwards;
        }

        @keyframes fadeIn {
            to { opacity: 1; }
        }

        .location-text { color: #00ffff; font-weight: bold; }
        .combat-text { color: #ff6666; }
        .loot-text { color: #FFD700; }
        .system-text { color: #888; font-style: italic; }
        .damage-text { color: #ff0000; font-weight: bold; }
        .heal-text { color: #00ff00; font-weight: bold; }
        .exp-gain { color: #66ff66; font-weight: bold; }
        .level-up { color: #ffd700; font-weight: bold; animation: levelUpGlow 0.5s ease-in-out; }
        .affinity-gain { color: #ff99ff; font-style: italic; }

        @keyframes levelUpGlow {
            0%, 100% { text-shadow: none; }
            50% { text-shadow: 0 0 15px #ffd700; }
        }

        /* Action Panel */
        .action-panel {
            background: #1a1a1a;
            border-top: 1px solid #333;
            padding: 15px;
        }

        .quick-actions {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin-bottom: 15px;
        }

        .action-btn {
            background: linear-gradient(to bottom, #3a3a3a, #2a2a2a);
            border: 1px solid #555;
            color: #fff;
            padding: 12px;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
            position: relative;
            overflow: hidden;
        }

        .action-btn:hover:not(:disabled) {
            background: linear-gradient(to bottom, #4a4a4a, #3a3a3a);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }

        .action-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            background: #222;
        }

        .action-btn.movement { border-color: #66ff66; color: #66ff66; }
        .action-btn.combat { border-color: #ff6666; color: #ff6666; }
        .action-btn.special { border-color: #FFD700; color: #FFD700; }

        /* Right Panel */
        .right-panel {
            grid-area: right-panel;
            background: #1a1a1a;
            border: 1px solid #333;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .panel-tabs {
            display: flex;
            background: #0a0a0a;
            border-bottom: 1px solid #333;
        }

        .tab {
            flex: 1;
            padding: 12px 8px;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 12px;
            background: transparent;
            border: none;
            color: #666;
        }

        .tab:hover {
            background: #1a1a1a;
            color: #ccc;
        }

        .tab.active {
            background: #2a2a2a;
            border-bottom: 2px solid #00ff00;
            color: #00ff00;
        }

        .tab-content {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        /* Inventory Grid */
        .inventory-grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 6px;
            margin-bottom: 20px;
        }

        .inventory-slot {
            aspect-ratio: 1;
            background: #2a2a2a;
            border: 1px solid #444;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 14px;
            position: relative;
            transition: all 0.2s;
        }

        .inventory-slot:hover {
            transform: scale(1.05);
            border-color: #666;
        }

        .inventory-slot.filled {
            background: #003300;
            border-color: #00ff00;
        }

        .item-count {
            position: absolute;
            bottom: 2px;
            right: 2px;
            font-size: 10px;
            color: #FFD700;
            font-weight: bold;
            background: rgba(0,0,0,0.7);
            padding: 1px 3px;
            border-radius: 2px;
        }

        /* Progress Section */
        .progress-section h4 {
            color: #FFD700;
            margin-bottom: 15px;
            font-size: 16px;
        }

        .progress-buttons {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 8px;
            margin-bottom: 15px;
        }

        .progress-btn {
            background: #333;
            border: 1px solid #00ff41;
            color: #00ff41;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-family: inherit;
            font-size: 11px;
            transition: all 0.2s;
        }

        .progress-btn:hover {
            background: rgba(0, 255, 65, 0.1);
            box-shadow: 0 0 8px rgba(0, 255, 65, 0.3);
        }

        .progress-messages {
            max-height: 200px;
            overflow-y: auto;
            background: rgba(0,0,0,0.3);
            border: 1px solid #333;
            border-radius: 4px;
            padding: 8px;
        }

        .progression-message {
            margin-bottom: 6px;
            padding: 4px 8px;
            border-radius: 3px;
            font-size: 11px;
            border-left: 3px solid;
            animation: fadeIn 0.3s ease-in;
        }

        .progression-message.success {
            background: rgba(0, 255, 65, 0.1);
            border-left-color: #00ff41;
            color: #00ff41;
        }

        .progression-message.error {
            background: rgba(255, 69, 69, 0.1);
            border-left-color: #ff4545;
            color: #ff4545;
        }

        .progression-message.level-up {
            background: rgba(255, 215, 0, 0.1);
            border-left-color: #ffd700;
            color: #ffd700;
            font-weight: bold;
        }

        /* Bottom Panel - Chat */
        .bottom-panel {
            grid-area: bottom-panel;
            background: #1a1a1a;
            border: 1px solid #333;
            display: flex;
            flex-direction: column;
        }

        .chat-tabs {
            display: flex;
            background: #0a0a0a;
            border-bottom: 1px solid #333;
        }

        .chat-tab {
            padding: 8px 16px;
            background: transparent;
            border: none;
            color: #666;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.2s;
        }

        .chat-tab:hover {
            color: #ccc;
        }

        .chat-tab.active {
            color: #00ff00;
            border-bottom: 2px solid #00ff00;
        }

        .chat-messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            font-size: 13px;
        }

        .chat-message {
            margin-bottom: 4px;
            opacity: 0;
            animation: fadeIn 0.3s forwards;
        }

        .chat-name {
            font-weight: bold;
            cursor: pointer;
        }

        .chat-name:hover {
            text-decoration: underline;
        }

        .chat-name.global { color: #ffffff; }
        .chat-name.guild { color: #00ff00; }
        .chat-name.party { color: #66b3ff; }
        .chat-name.system { color: #FFD700; }

        .chat-input-container {
            display: flex;
            padding: 10px;
            gap: 10px;
            background: #0a0a0a;
            border-top: 1px solid #333;
        }

        .chat-input {
            flex: 1;
            background: #1a1a1a;
            border: 1px solid #444;
            color: #fff;
            padding: 8px;
            border-radius: 4px;
            font-size: 13px;
            font-family: inherit;
        }

        .chat-input:focus {
            outline: none;
            border-color: #00ff41;
            box-shadow: 0 0 5px rgba(0, 255, 65, 0.3);
        }

        .chat-send {
            background: linear-gradient(to bottom, #0066ff, #0044cc);
            border: none;
            color: white;
            padding: 8px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.2s;
        }

        .chat-send:hover {
            background: linear-gradient(to bottom, #0077ff, #0055dd);
            transform: scale(1.05);
        }

        /* Mobile Responsive */
        @media (max-width: 1024px) {
            .game-container {
                grid-template-columns: 250px 1fr 250px;
            }
        }

        @media (max-width: 768px) {
            .game-container {
                grid-template-areas:
                    "header"
                    "main"
                    "bottom-panel";
                grid-template-columns: 1fr;
                grid-template-rows: 60px 1fr 150px;
            }

            .left-panel, .right-panel {
                display: none;
            }

            .quick-actions {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        /* Race Abilities */
        .ability-item {
            background: rgba(0, 50, 0, 0.2);
            border: 1px solid #333;
            border-radius: 4px;
            margin-bottom: 8px;
            padding: 10px;
        }

        .ability-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 6px;
        }

        .ability-name {
            color: #00ff41;
            font-weight: bold;
            font-size: 13px;
        }

        .ability-type {
            background: rgba(0, 0, 0, 0.5);
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 10px;
            color: #666;
        }

        .ability-type.active {
            color: #ffff00;
        }

        .ability-description {
            font-size: 11px;
            color: #ccc;
            margin-bottom: 6px;
            line-height: 1.3;
        }

        .ability-btn {
            background: #333;
            border: 1px solid #00ff41;
            color: #00ff41;
            padding: 4px 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 10px;
            font-family: inherit;
        }

        .ability-btn:hover:not(:disabled) {
            background: rgba(0, 255, 65, 0.1);
        }

        .ability-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .loading, .error, .no-abilities {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 20px;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <!-- Header Bar -->
        <header class="header">
            <div class="resource-bar">
                <div class="character-name-display">
                    <%= character.name %>
                    <% if (character.prestige_marker) { %>
                        <span class="prestige-marker <%= character.prestige_marker %>">
                            <% if (character.prestige_marker === 'bronze') { %>🥉<% } %>
                            <% if (character.prestige_marker === 'silver') { %>🥈<% } %>
                            <% if (character.prestige_marker === 'gold') { %>🥇<% } %>
                            <% if (character.prestige_marker === 'platinum') { %>💎<% } %>
                            <% if (character.prestige_marker === 'diamond') { %>💠<% } %>
                            <% if (character.prestige_marker === 'legendary') { %>⭐<% } %>
                        </span>
                    <% } %>
                </div>
                <div class="resource">
                    <div class="resource-icon gold-icon"></div>
                    <span><%= character.gold.toLocaleString() %></span>
                </div>
                <div class="resource">
                    <div class="resource-icon exp-icon"></div>
                    <span>Lv <%= character.level %> (<%= progression.progressPercentage %>%)</span>
                </div>
                <div class="resource">
                    <div class="resource-icon hp-icon"></div>
                    <span><%= character.health_current %>/<%= character.health_max %></span>
                </div>
                <div class="resource">
                    <div class="resource-icon mp-icon"></div>
                    <span><%= character.mana_current %>/<%= character.mana_max %></span>
                </div>
            </div>
            <% if (user.is_admin) { %>
                <button class="action-btn special" onclick="window.location.href='/admin'">ADMIN</button>
            <% } %>
            <button class="action-btn special" onclick="window.location.href='/logout'">LOGOUT</button>
        </header>

        <!-- Left Panel - Character Info -->
        <aside class="left-panel">
            <div class="character-info">
                <div class="character-title"><%= character.race_name %> - Level <%= character.level %></div>
                <div class="character-title">📍 <%= character.location_zone.replace('_', ' ').toUpperCase() %></div>
                
                <div class="stat-bars">
                    <div class="stat-bar">
                        <div class="stat-label">
                            <span>Health</span>
                            <span><%= character.health_current %>/<%= character.health_max %></span>
                        </div>
                        <div class="bar-container">
                            <div class="bar-fill hp-bar" style="width: <%= (character.health_current / character.health_max * 100) %>%"></div>
                            <div class="bar-text"><%= Math.round((character.health_current / character.health_max * 100)) %>%</div>
                        </div>
                    </div>
                    <div class="stat-bar">
                        <div class="stat-label">
                            <span>Mana</span>
                            <span><%= character.mana_current %>/<%= character.mana_max %></span>
                        </div>
                        <div class="bar-container">
                            <div class="bar-fill mp-bar" style="width: <%= (character.mana_current / character.mana_max * 100) %>%"></div>
                            <div class="bar-text"><%= Math.round((character.mana_current / character.mana_max * 100)) %>%</div>
                        </div>
                    </div>
                    <div class="stat-bar">
                        <div class="stat-label">
                            <span>Experience</span>
                            <span><%= progression.progressPercentage %>% to next</span>
                        </div>
                        <div class="bar-container">
                            <div class="bar-fill exp-bar" style="width: <%= progression.progressPercentage %>%"></div>
                            <div class="bar-text"><%= progression.progressPercentage %>%</div>
                        </div>
                    </div>
                </div>

                <div class="stats-grid">
                    <div class="stat-item">
                        <span>STR</span>
                        <span class="stat-value"><%= character.str_total %></span>
                    </div>
                    <div class="stat-item">
                        <span>INT</span>
                        <span class="stat-value"><%= character.int_total %></span>
                    </div>
                    <div class="stat-item">
                        <span>VIT</span>
                        <span class="stat-value"><%= character.vit_total %></span>
                    </div>
                    <div class="stat-item">
                        <span>DEX</span>
                        <span class="stat-value"><%= character.dex_total %></span>
                    </div>
                    <div class="stat-item">
                        <span>WIS</span>
                        <span class="stat-value"><%= character.wis_total %></span>
                    </div>
                    <div class="stat-item">
                        <span>TOTAL</span>
                        <span class="stat-value"><%= character.str_total + character.int_total + character.vit_total + character.dex_total + character.wis_total %></span>
                    </div>
                </div>
            </div>

            <div class="equipment-section">
                <h3>Equipment</h3>
                <div class="equipment-grid">
                    <div class="equipment-slot equipped">⛑️</div>
                    <div class="equipment-slot equipped">🛡️</div>
                    <div class="equipment-slot equipped">👖</div>
                    <div class="equipment-slot equipped">⚔️</div>
                    <div class="equipment-slot">🛡️</div>
                    <div class="equipment-slot equipped">👢</div>
                    <div class="equipment-slot equipped">💍</div>
                    <div class="equipment-slot equipped">💍</div>
                    <div class="equipment-slot">📿</div>
                </div>
            </div>

            <div class="affinity-section">
                <h4>Weapon Affinities</h4>
                <% weaponAffinities.forEach(affinity => { %>
                <div class="affinity-item">
                    <span class="affinity-name"><%= affinity.weapon_type %></span>
                    <span class="affinity-value"><%= parseFloat(affinity.affinity_percentage).toFixed(1) %>%</span>
                </div>
                <% }); %>
                
                <h4 style="margin-top: 15px;">Magic Affinities</h4>
                <% magicAffinities.forEach(affinity => { %>
                <div class="affinity-item">
                    <span class="affinity-name"><%= affinity.magic_school %></span>
                    <span class="affinity-value"><%= parseFloat(affinity.affinity_percentage).toFixed(1) %>%</span>
                </div>
                <% }); %>
            </div>
        </aside>

        <!-- Main Game Area -->
        <main class="main-panel">
            <div class="game-output" id="game-output">
                <p class="game-text location-text">[ <%= character.location_zone.replace('_', ' ').toUpperCase() %> - Level <%= character.level %> Zone ]</p>
                <p class="game-text system-text">The ancient trees loom overhead, blocking out most of the sunlight. You hear strange noises in the distance.</p>
                <p class="game-text">You move north into the shadowy depths.</p>
                <p class="game-text combat-text">A Wild Dire Wolf (Level <%= Math.min(character.level + 3, character.level * 1.1) %>) appears!</p>
                <p class="game-text">You attack with your weapon!</p>
                <p class="game-text damage-text">Critical Hit! You deal <%= Math.floor(character.str_total * 2.5 + Math.random() * 100) %> damage!</p>
                <p class="game-text">The Dire Wolf strikes back with its claws!</p>
                <p class="game-text damage-text">You take <%= Math.floor(50 + Math.random() * 50) %> damage.</p>
                <p class="game-text">You cast a fire spell!</p>
                <p class="game-text damage-text">You deal <%= Math.floor(character.int_total * 3 + Math.random() * 200) %> fire damage!</p>
                <p class="game-text combat-text">You have defeated the Dire Wolf!</p>
                <p class="game-text loot-text">You gain <%= Math.floor(character.level * 25 + Math.random() * 500) %> experience points!</p>
                <p class="game-text loot-text">You loot: <%= Math.floor(character.level * 5 + Math.random() * 100) %> gold, Wolf Pelt (x2), Health Potion</p>
                <p class="game-text affinity-gain">Your sword mastery increases! (<%= Math.floor(Math.random() * 100) %>/100)</p>
            </div>

            <div class="action-panel">
                <div class="quick-actions">
                    <button class="action-btn movement" onclick="move('north')">North</button>
                    <button class="action-btn movement" onclick="move('south')">South</button>
                    <button class="action-btn movement" onclick="move('east')">East</button>
                    <button class="action-btn movement" onclick="move('west')">West</button>
                    <button class="action-btn combat" onclick="performAction('fight')">Fight</button>
                    <button class="action-btn combat" onclick="performAction('cast')">Cast</button>
                    <button class="action-btn special" onclick="performAction('rest')">Rest</button>
                    <button class="action-btn special" onclick="performAction('map')">Map</button>
                </div>
            </div>
        </main>

        <!-- Right Panel - Tabs -->
        <aside class="right-panel">
            <div class="panel-tabs">
                <button class="tab active" onclick="switchTab('inventory')">Inventory</button>
                <button class="tab" onclick="switchTab('abilities')">Abilities</button>
                <button class="tab" onclick="switchTab('progress')">Progress</button>
            </div>

            <!-- Inventory Tab -->
            <div id="inventory-tab" class="tab-content active">
                <div class="inventory-grid">
                    <div class="inventory-slot filled">⚔️</div>
                    <div class="inventory-slot filled">🛡️</div>
                    <div class="inventory-slot filled">🧪<span class="item-count">12</span></div>
                    <div class="inventory-slot filled">🧪<span class="item-count">8</span></div>
                    <div class="inventory-slot filled">🥩<span class="item-count">25</span></div>
                    <div class="inventory-slot filled">💎</div>
                    <div class="inventory-slot filled">📜</div>
                    <div class="inventory-slot filled">🗝️<span class="item-count">3</span></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                    <div class="inventory-slot"></div>
                </div>
            </div>

            <!-- Abilities Tab -->
            <div id="abilities-tab" class="tab-content">
                <h4 style="color: #FFD700; margin-bottom: 15px;">Race Abilities</h4>
                <div id="race-abilities">
                    <div class="loading">Loading abilities...</div>
                </div>
            </div>

            <!-- Progress Tab -->
            <div id="progress-tab" class="tab-content">
                <div class="progress-section">
                    <h4>Character Progression</h4>
                    <div class="progress-buttons">
                        <button class="progress-btn" onclick="gainExperience(100)">+100 EXP</button>
                        <button class="progress-btn" onclick="gainExperience(1000)">+1K EXP</button>
                        <button class="progress-btn" onclick="gainExperience(10000)">+10K EXP</button>
                    </div>
                    <div class="progress-messages" id="progression-messages">
                        <div class="progression-message success">Start gaining experience to see rewards!</div>
                    </div>
                </div>
            </div>
        </aside>

        <!-- Bottom Panel - Chat -->
        <section class="bottom-panel">
            <div class="chat-tabs">
                <button class="chat-tab active" data-channel="all">All</button>
                <button class="chat-tab" data-channel="global">Global</button>
                <button class="chat-tab" data-channel="guild">Guild</button>
                <button class="chat-tab" data-channel="party">Party</button>
                <button class="chat-tab" data-channel="system">System</button>
            </div>

            <div class="chat-messages" id="chat-messages">
                <div class="chat-message">
                    <span class="chat-name global">DragonSlayer:</span>
                    <span>Anyone want to group for Demon Tower?</span>
                </div>
                <div class="chat-message">
                    <span class="chat-name guild">[Guild] MysticMage:</span>
                    <span>Guild raid starts in 30 minutes!</span>
                </div>
                <div class="chat-message">
                    <span class="chat-name system">System:</span>
                    <span>Welcome to Aeturnis Online! Type /help for commands.</span>
                </div>
            </div>

            <div class="chat-input-container">
                <input type="text" class="chat-input" id="chat-input" placeholder="Type message or command...">
                <button class="chat-send" onclick="sendChatMessage()">Send</button>
            </div>
        </section>
    </div>

    <script src="/js/game.js"></script>
    <script>
        // Tab switching functionality
        function switchTab(tabName) {
            // Remove active class from all tabs and content
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // Add active class to selected tab and content
            event.target.classList.add('active');
            document.getElementById(`${tabName}-tab`).classList.add('active');
        }

        // Chat functionality
        function sendChatMessage() {
            const chatInput = document.getElementById('chat-input');
            const message = chatInput.value.trim();
            
            if (message) {
                // Add message to chat (in real implementation, this would go through the server)
                addChatMessage('You', message, 'global');
                chatInput.value = '';
            }
        }

        function addChatMessage(name, message, type = 'global') {
            const chatMessages = document.getElementById('chat-messages');
            const messageElement = document.createElement('div');
            messageElement.className = 'chat-message';
            messageElement.innerHTML = `
                <span class="chat-name ${type}">${name}:</span>
                <span>${message}</span>
            `;
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Game text functionality
        function updateGameText(message) {
            const gameOutput = document.getElementById('game-output');
            const messageElement = document.createElement('p');
            messageElement.className = 'game-text';
            messageElement.innerHTML = message;
            gameOutput.appendChild(messageElement);
            gameOutput.scrollTop = gameOutput.scrollHeight;
            
            // Keep only last 50 messages for performance
            while (gameOutput.children.length > 50) {
                gameOutput.removeChild(gameOutput.firstChild);
            }
        }

        // Chat tab functionality
        document.querySelectorAll('.chat-tab').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('.chat-tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Chat input handling
        document.getElementById('chat-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendChatMessage();
            }
        });

        // Initialize abilities when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadRaceAbilities();
        });

        async function loadRaceAbilities() {
            try {
                const response = await fetch('/api/abilities/race-abilities/<%= character.id %>');
                const data = await response.json();
                
                const abilitiesContainer = document.getElementById('race-abilities');
                if (data.success && data.abilities && data.abilities.length > 0) {
                    abilitiesContainer.innerHTML = data.abilities.map(ability => `
                        <div class="ability-item">
                            <div class="ability-header">
                                <span class="ability-name">${ability.ability_name}</span>
                                <span class="ability-type ${ability.ability_type}">${ability.ability_type}</span>
                            </div>
                            <div class="ability-description">${ability.description}</div>
                            ${ability.ability_type === 'active' ? `
                                <button class="ability-btn" onclick="useAbility('${ability.ability_name}')" 
                                        ${ability.on_cooldown ? 'disabled' : ''}>
                                    ${ability.on_cooldown ? `Cooldown: ${ability.cooldown_remaining}s` : 'Use'}
                                </button>
                            ` : ''}
                        </div>
                    `).join('');
                } else {
                    abilitiesContainer.innerHTML = '<div class="no-abilities">No race abilities available</div>';
                }
            } catch (error) {
                console.error('Error loading abilities:', error);
                document.getElementById('race-abilities').innerHTML = '<div class="error">Failed to load abilities</div>';
            }
        }

        async function useAbility(abilityName) {
            try {
                const response = await fetch('/api/abilities/use-ability', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ ability_name: abilityName })
                });
                
                const data = await response.json();
                if (data.success) {
                    updateGameText(`<span class="heal-text">Used ability: ${abilityName}. ${data.message}</span>`);
                    loadRaceAbilities(); // Reload to update cooldowns
                } else {
                    updateGameText(`<span class="damage-text">Failed to use ${abilityName}: ${data.error}</span>`);
                }
            } catch (error) {
                console.error('Error using ability:', error);
                updateGameText(`<span class="damage-text">Error using ability: ${abilityName}</span>`);
            }
        }

        // Add some simulated activity
        setInterval(() => {
            const messages = [
                'A gentle breeze rustles through the trees.',
                'You hear distant footsteps echoing in the cavern.',
                'The sound of flowing water can be heard nearby.',
                'Strange shadows move at the edge of your vision.'
            ];
            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
            updateGameText(`<span class="system-text">${randomMessage}</span>`);
        }, 30000); // Every 30 seconds
    </script>
</body>
</html>
